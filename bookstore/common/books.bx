class {
    function saveBooks(
        required string isbn13,
        required string title = "",
        required string isbn,
        required numeric weight = 0,
        required numeric pages = 0,
        required string binding = "",
        required string language = "",
        string description = "",
        string image = "",
        numeric publisherId = 0
    ) {
        queryExecute("
            INSERT INTO books (isbn13, title, isbn, weight, pages, binding, language, description, image, publisherId)
            VALUES (:isbn13, :title, :isbn, :weight, :pages, :binding, :language, :description, :image, :publisherId)
            ON DUPLICATE KEY UPDATE 
                title = :title,
                isbn = :isbn,
                weight = :weight,
                pages = :pages,
                binding = :binding,
                language = :language,
                description = :description,
                image = IFNULL(:image, image),
                publisherId = :publisherId
        ", {
            isbn13: arguments.isbn13,
            title: arguments.title,
            isbn: arguments.isbn,
            weight: arguments.weight,
            pages: arguments.pages,
            binding: arguments.binding,
            language: arguments.language,
            description: arguments.description,
            image: len(trim(arguments.image)) ? arguments.image : javacast('null', ''),
            publisherId: arguments.publisherId
        });
    }

    function searchBooks(string searchTerm="", numeric genreId=0) {
        if(searchTerm.len() != 0) {
             return queryExecute("
                SELECT books.*, publishers.name as publisherName 
                FROM books
                LEFT JOIN publishers ON books.publisherId = publishers.id
                WHERE title LIKE :searchTerm
                OR isbn13 = :searchTermExact",
                { 
                    searchTerm: '%#trim(arguments.searchTerm)#%',
                    searchTermExact: arguments.searchTerm
                });
        } else if(genreId > 0) {
            return queryExecute("
                SELECT DISTINCT books.*, publishers.name as publisherName
                FROM books
                INNER JOIN genresToBooks ON books.isbn13 = genresToBooks.isbn13
                LEFT JOIN publishers ON books.publisherId = publishers.id
                WHERE genresToBooks.genreId = :genreId",
                {genreId: arguments.genreId});
        }
        return queryNew('isbn13,title,publisherName');
    }
    
    function allPublishers(string name = "") {
        return queryExecute("
            SELECT * FROM publishers 
            WHERE (:name = '' OR name = :name)
        ", {
            name: trim(arguments.name)
        });
    }

    function uploadFile( string fileField ){
        return fileUpload(expandPath("/bookstore/common/images/"),fileField,"*","makeUnique");
    }

    function allGenres() {
        return queryExecute("SELECT id, name FROM genres ORDER BY name", {}, {returnType: 'query'});
    }
    
    function saveGenreToBook(numeric genreId, string isbn13) {
        return queryExecute("INSERT INTO genresToBooks (genreId, isbn13) VALUES (:genreId, :isbn13)",
            {genreId: arguments.genreId, isbn13: arguments.isbn13}
        );
    }
    
    function clearAllBookGenres(string isbn13) {
        return queryExecute("DELETE FROM genresToBooks WHERE isbn13 = :isbn13",
            {isbn13: arguments.isbn13}
        );
    }
    
    function allGenresForBook(numeric genreId=0, string isbn13='') {
        var ourSQL = "select b.*, g.name as genreName from books b 
              inner join genresToBooks gtb on b.isbn13 = gtb.isbn13
              inner join genres g on gtb.genreId = g.id";
              
        if(arguments.genreId > 0){
           ourSQL &= " where gtb.genreId = #arguments.genreId#";
        }
        if(arguments.isbn13.len() > 0){
           ourSQL &= " and gtb.isbn13 = '#arguments.isbn13#'";
        }
        
        return queryExecute(ourSQL);
    }
    
    function distinctGenres() {
        return queryExecute("SELECT DISTINCT g.id, g.name FROM genresToBooks gtb 
             INNER JOIN genres g ON g.id = gtb.genreId ORDER BY g.name");
    }
    
    function getAllBooks() {
        return queryExecute("
            SELECT books.*, publishers.name as publisherName 
            FROM books
            LEFT JOIN publishers ON books.publisherId = publishers.id
            ORDER BY books.title");
    }
    
    function getBookDetails(string isbn13) {
        return queryExecute("
            SELECT books.*, publishers.name as publisherName 
            FROM books
            LEFT JOIN publishers ON books.publisherId = publishers.id
            WHERE books.isbn13 = :isbn13",
            {isbn13: arguments.isbn13});
    }
}
